{'domain': '(define (domain triangle)\n\n(:requirements :strips :typing :negative-preconditions :fluents :equality)\n\n(:types segment point angle)\n\n(:predicates\n    (begin_with ?s - segment ?p - point)\n    (end_with ?s - segment ?p - point)\n    (isAngle ?A - angle ?p - point)\n    (isSegment ?s - segment ?p1 ?p2 - point)\n    (isArc ?p - point ?s - segment)\n    (isPoint ?p - point)\n    (isRay ?A - angle ?s1 - segment ?p - point ?s2 - segment)\n)\n(:functions\n    (length ?s - segment)\n    (angle ?A - angle)\n)\n\n(:action draw_base\n    :parameters (?s1 - segment\n                 ?p1 ?p2 - point)\n    :precondition (and\n        (not (= ?p1 ?p2))\n        (not (isPoint ?p1))\n        (not (isPoint ?p2))\n        (> (length ?s1) 0)\n    )\n    :effect (and\n        (isPoint ?p1)\n        (isPoint ?p2)\n        (isSegment ?s1 ?p1 ?p2)\n    )\n)\n\n(:action draw_ray\n    :parameters (?p1 ?p2 - point\n                ?s1 ?s2 - segment\n                ?A1 - angle)\n    :precondition (and\n        (not (= ?p1 ?p2))\n        (not (= ?s1 ?s2))\n        (or\n            (isSegment ?s1 ?p1 ?p2)\n            (isSegment ?s1 ?p2 ?p1)\n        )\n        (isAngle ?A1 ?p1)\n        (> (angle ?A1) 0)\n        (or\n            (begin_with ?s2 ?p1)\n            (end_with ?s2 ?p1)\n        )\n    )\n    :effect (and\n        (isRay ?A1 ?s1 ?p1 ?s2)\n    )\n)\n\n(:action draw_arc\n    :parameters (?p1 - point\n                 ?s1 - segment)\n    :precondition (and\n        (isPoint ?p1)\n        (> (length ?s1) 0)\n\n    )\n    :effect (and\n        (isArc ?p1 ?s1)\n    )\n)\n\n(:action arc_arc_intersection\n    :parameters (?p1 ?p2 ?p3 - point\n                ?s1 ?s2 - segment)\n    :precondition (and\n        (not (= ?p1 ?p2))\n        (not (= ?p1 ?p3))\n        (not (= ?p2 ?p3))\n        (not (= ?s1 ?s2))\n        (isArc ?p1 ?s1)\n        (isArc ?p2 ?s2)\n        (begin_with ?s1 ?p1)\n        (end_with ?s1 ?p3)\n        (begin_with ?s2 ?p2)\n        (end_with ?s2 ?p3)\n    )\n    :effect (and\n        (isPoint ?p3)\n    )\n)\n\n(:action arc_ray_intersection\n    :parameters (?p1 ?p2 ?p3 - point\n                ?s1 ?s2 ?s3 - segment\n                ?A - angle)\n    :precondition (and\n        (not (= ?p1 ?p2))\n        (not (= ?p1 ?p3))\n        (not (= ?p2 ?p3))\n        (not (= ?s1 ?s2))\n        (not (= ?s1 ?s3))\n        (not (= ?s2 ?s3))\n        \n        (isArc ?p1 ?s1)\n        (isRay ?A ?s2 ?p2 ?s3)\n        \n        (or\n            (begin_with ?s1 ?p1)\n            (end_with ?s1 ?p1)\n        )\n        (or\n            (begin_with ?s2 ?p2)\n            (end_with ?s2 ?p2)\n        )\n    )\n    :effect (and\n        (isPoint ?p3)\n    )\n)\n\n(:action join_points\n    :parameters (?p1 ?p2 - point\n                ?s1 - segment)\n    :precondition (and\n        (isPoint ?p1)\n        (isPoint ?p2)\n        (not (= ?p1 ?p2))\n        (begin_with ?s1 ?p1)\n        (end_with ?s1 ?p2)\n        ; (or\n        ;     (and \n        ;         (begin_with ?s1 ?p2)\n        ;         (end_with ?s1 ?p1)\n        ;     )\n        ;     (and \n        ;         (begin_with ?s1 ?p1)\n        ;         (end_with ?s1 ?p2)\n        ;     )\n        ; )\n    )\n    :effect (and\n        (isSegment ?s1 ?p1 ?p2)\n    )\n)\n)', 'problem': '; Hello World example problem\n\n(define (problem construct)\n\n(:domain triangle)\n\n(:objects\n    a b c - point\n    Sa Sb Sc - segment\n    A B C - angle\n)\n\n(:init\n    \n    ; Always true\n    (begin_with Sc a)\n    (end_with Sc b)\n    \n    (begin_with Sa b)\n    (end_with Sa c)\n    \n    (begin_with Sb a)\n    (end_with Sb c)\n    \n    (isAngle A a)\n    (isAngle B b)\n    (isAngle C c)\n\n    (= (length Sa) 4)\n    (= (length Sc) 5)\n    (= (angle C) 90)\n\n)\n(:goal\n    (and\n        (isSegment Sc a b)\n        (isSegment Sa b c)\n        (isSegment Sb a c)\n    )\n)\n'}